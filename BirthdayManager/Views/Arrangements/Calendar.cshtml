@model BirthdayManager.Core.ViewModels.CalendarViewModel

@{
    ViewBag.Title = "Birthdays Calendar";
}


<h2 class="calendar-list-header"><i class="fa fa-calendar"></i> Birthdays Calendar</h2>

<ul class="nav nav-pills" style="padding-bottom: 20px">
    <li class="active"><a href="#future" data-toggle="tab" aria-expanded="true">Future</a></li>
    <li class=""><a href="#past" data-toggle="tab" aria-expanded="false">Past</a></li>
</ul>


<div id="myTabContent" class="tab-content">
    <div class="tab-pane fade active in" id="future">
        <div id="calendar-container" class="row">
            @foreach (var birthday in @Model.UpcommingBirthdays)
            {
                @Html.Partial("_BirthdayCard", birthday)
            }
        </div>
    </div>
    <div class="tab-pane fade" id="past">
        <div id="calendar-container" class="row">
            @foreach (var birthday in @Model.RecentPastBirthdays)
            {
                @Html.Partial("_BirthdayCard", birthday)
            }
        </div>
    </div>
</div>


<div id="birthday-modal" class="modal fade">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id="loader-container" style="display: none">
                <div id="loader" class="centered"></div>
            </div>
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class="modal-title">Modal title</h3>
                <div id="modal-completed-label" class="label label-warning" style="display: none">Completed</div>
            </div>
            <div class="modal-body">
                <div class="row" style="margin: 10px;">
                    <div class="col-md-6 col-sm-12">
                        <form id="modal-arrangement-form" class="form-horizontal">
                            <div class="form-group">
                                <label>Birthday</label>
                                <input type="text" id="" class="form-control modal-birthday-input" readonly>
                            </div>
                            <div class="form-group">
                                <label>Collected Budget</label>
                                <input type="text" class="form-control modal-budget-input" value="0" readonly="">
                            </div>
                            <div class="form-group">
                                <label>Gift Price</label>
                                <div>
                                    <input type="text" class="form-control" id="modal-gift-price" placeholder="Gift Price">
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="textArea">Gift Description</label>
                                <div>
                                    <textarea class="form-control" rows="3" id="modal-gift-description"></textarea>
                                    <span class="help-block">Description here..</span>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="col-md-6 col-sm-12">
                        <div class="form-group">
                            <label>Add Subscriber</label>
                            <div class="tt-container">
                                <input id="user-input" name="FullName" required type="text" value="" class="form-control"/>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-9">
                                <p>Subscribers:</p>
                                <ul id="subscriber-list" class="list-group"></ul>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" id="modal-close-button" class="btn btn-default" data-dismiss="modal">
                    Close
                </button>
                <button type="button" id="modal-save-button" class="btn btn-primary">
                    Save <i id="modal-save-button-loader" class="fa fa-circle-o-notch fa-spin" style="margin-left: 5px; display: none"></i>
                </button>
                <button type="button" id="modal-finish-button" class="btn btn-info">
                    It's done <i id="modal-finish-button-loader" class="fa fa-circle-o-notch fa-spin" style="margin-left: 5px; display: none"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        $(document).ready(function () {
            var selectedCardModel = {
                id: 0,
                birthdayManUsername: "",
                subscribersUseranmes: [],
                giftPrice: 0,
                giftDescription: ""
            };

            var users = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('fullName'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '/api/users/'
                remote: {
                    url: '/api/users?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#user-input').typeahead({
                minLength: 1,
                highlight: true
            },
                {
                    name: 'users',
                    display: 'fullName',
                    source: users,
                    limit: 10,
                })
                .on('typeahead:select',
                function (e, user) {

                    for (var i = 0; i < selectedCardModel.subscribersUseranmes.length; i++) {
                        if (selectedCardModel.subscribersUseranmes[i].username.toLowerCase() == user.userName.toLowerCase()) {
                            toastr.error("User is already in list.");
                            $("#user-input").typeahead("val", "");
                            return;
                        }
                    }

                    addSubscriberToList(user.userName, user.fullName);
                    rebindSubscriberListDeleteEvents();

                    $("#user-input").typeahead("val", "");

                    selectedCardModel.subscribersUseranmes.push({
                        username: user.userName,
                        fullname: user.fullName
                    });

                    //recalculate budget
                    var budget = selectedCardModel.subscribersUseranmes.length * 60;
                    $("#birthday-modal .modal-budget-input").val(budget);
                });

            $(".birthday-card").click(function (e) {
                var fullname = $(this).find(".card-fullname").html();
                var birthdayDate = $(this).find(".card-birthday").html();

                selectedCardModel.id = $(this).attr("data-arrangement-id");

                var isArrangementExists = selectedCardModel.id != undefined && selectedCardModel.id != 0;
                if (isArrangementExists) {
                    $("#loader-container").show();

                    $.ajax({
                        url: "/api/arrangemets/" + selectedCardModel.id,
                        method: "GET",
                        dataType: 'json',
                        success: function (result) {
                            selectedCardModel.birthdayManUsername = result.birthdayManUsername;
                            selectedCardModel.subscribersUseranmes = result.subscribersUseranmes;
                            selectedCardModel.giftPrice = result.giftPrice;
                            selectedCardModel.giftDescription = result.giftDescription;

                            if (result.isComplete) {
                                $("#modal-completed-label").show();
                            }

                            //Fill form
                            $("#modal-gift-price").val(selectedCardModel.giftPrice);
                            $("#modal-gift-description").val(selectedCardModel.giftDescription);

                            $.each(selectedCardModel.subscribersUseranmes,
                                function (index, subscriber) {
                                    addSubscriberToList(subscriber.username, subscriber.fullname);
                                });

                            rebindSubscriberListDeleteEvents();

                            //recalculate budget
                            var budget = selectedCardModel.subscribersUseranmes.length * 60;
                            $("#birthday-modal .modal-budget-input").val(budget);

                            $("#loader-container").hide();
                        },
                        error: function (ex) {
                            $("#loader-container").hide();
                            toastr.error(ex.responseJSON.message);
                        }
                    });
                } else {
                    selectedCardModel.birthdayManUsername = $(this).attr("data-arrangement-username");
                }

                $("#birthday-modal .modal-title").html('<i class="fa fa-birthday-cake"></i> ' + fullname);
                $("#birthday-modal .modal-birthday-input").val(birthdayDate);

                $("#birthday-modal").modal('show');
            });


            $('#birthday-modal').on('hidden.bs.modal', function () {
                clearModalDialogForm();
            });

            $('#modal-finish-button').click(function (e) {
                bootbox.confirm({
                    title: "Finish arrangement for this birthday?",
                    message: "After finishing birthday card is marked as 'Complete' one. When birthday card becomes complete all the calculations are done and subscribers balance is adjusted.",
                    callback: function (result) {
                        if (result) {

                            //Start animate loading
                            $('#modal-finish-button-loader').show();
                            $('#modal-finish-button').addClass('disabled');
                            $('#modal-finish-button').attr('disabled', 'true');

                            $.ajax({
                                url: "/api/arrangemets/finish/" + selectedCardModel.id,
                                method: "POST",
                                success: function () {
                                    toastr.success("Birthday card marked as finished.");

                                    $('[data-arrangement-username=' + selectedCardModel.birthdayManUsername.toLowerCase() + ']').attr('data-arrangement-finished', true);
                                    $('[data-arrangement-username=' + selectedCardModel.birthdayManUsername.toLowerCase() +']').addClass('birthday-card-complete');

                                    $("#birthday-modal").modal('hide');
                                    clearModalDialogForm();

                                    $('#modal-finish-button-loader').hide();
                                    $('#modal-finish-button').removeClass('disabled');
                                    $('#modal-finish-button').removeAttr('disabled');

                                },
                                error: function (ex) {
                                    toastr.error(ex.responseJSON.message);
                                    $('#modal-finish-button-loader').hide();
                                    $('#modal-finish-button').removeClass('disabled');
                                    $('#modal-finish-button').removeAttr('disabled');
                                }
                            });
                        }
                    }
                });
            });

            $('#modal-save-button').click(function (e) {

                selectedCardModel.giftPrice = $("#modal-gift-price").val();
                selectedCardModel.giftDescription = $("#modal-gift-description").val();

                if (isNaN(selectedCardModel.giftPrice)) {
                    toastr.error("Gift price should be a number.");
                    return;
                }

                //Start animate loading
                $('#modal-save-button-loader').show();
                $('#modal-save-button').addClass('disabled');
                $('#modal-save-button').attr('disabled', 'true');

                $.ajax({
                    url: "/api/arrangemets",
                    method: "POST",
                    dataType: 'json',
                    data: selectedCardModel,
                    success: function (id) {
                        toastr.success("Saved successfully.");
                        //Set new created arrangement id
                        $('[data-arrangement-username=' + selectedCardModel.birthdayManUsername.toLowerCase() + ']').attr('data-arrangement-id', id);

                        $("#birthday-modal").modal('hide');
                        clearModalDialogForm();

                        $('#modal-save-button-loader').hide();
                        $('#modal-save-button').removeClass('disabled');
                        $('#modal-save-button').removeAttr('disabled');

                    },
                    error: function (ex) {
                        toastr.error(ex.responseJSON.message);
                        $('#modal-save-button-loader').hide();
                        $('#modal-save-button').removeClass('disabled');
                        $('#modal-save-button').removeAttr('disabled');
                    }
                });
            });

            function clearModalDialogForm() {
                $("#subscriber-list").html('');
                $("#birthday-modal .modal-budget-input").val(0);
                $("#modal-gift-price").val(0);
                $("#modal-gift-description").val('');
                $("#modal-completed-label").hide();
                selectedCardModel = {
                    id: 0,
                    userName: "",
                    subscribersUseranmes: [],
                    giftPrice: 0,
                    giftDescription: ""
                };
            }

            function addSubscriberToList(username, fullname) {
                $("#subscriber-list").append(
                    "<li " +
                    "class='card-subscriber-item list-group-item animated bounceIn' data-username='" +
                    username +
                    "'>" +
                    fullname +
                    "<button class='pull-right btn-link js-user-delete'><i class='fa fa-close'></i></button>" +
                    "</li>"
                );
            }

            function rebindSubscriberListDeleteEvents() {
                $(".js-user-delete").off("click");
                $(".js-user-delete").click(function (e) {
                    var subscriberUsername = $(this).parent().attr('data-username');

                    selectedCardModel.subscribersUseranmes = selectedCardModel.subscribersUseranmes.filter(function (subscriber) {
                        return subscriber.username !== subscriberUsername;
                    });

                    $(this).parent().remove();
                });
            }
        });
    </script>
}