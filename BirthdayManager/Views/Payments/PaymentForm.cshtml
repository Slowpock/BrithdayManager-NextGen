@using BirthdayManager.Core.Enums
@using Glimpse.Core.Extensions
@model BirthdayManager.Core.ViewModels.PaymentViewModel

@{
    ViewBag.Title = "New Payment";

}

<h2>New Payment</h2>

<form id="newPaymnet" action="@Url.Action("Save", "Payments")" method="post">

    @Html.ValidationSummary(true)
    <div class="form-group">
        <label>User</label>
        <div class="tt-container">
            <input id="user-input" name="FullName" required type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Amount)
        @Html.TextBoxFor(m => m.Amount, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Amount)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Description)
        @Html.TextBoxFor(m => m.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Description)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Type)
        @Html.DropDownListFor(m => m.Type, new List<SelectListItem>()
        {
            new SelectListItem() { Selected = true, Text = TransactionType.Supply.ToString(), Value = ((int)TransactionType.Supply).ToString()},
            new SelectListItem() { Selected = false, Text = TransactionType.Withdraw.ToString(), Value = ((int)TransactionType.Withdraw).ToString()}
        
        }, null , new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Type)
    </div>

    @Html.HiddenFor(x => x.Username)
    <button id="payment-submit" class="btn btn-primary">Submit</button>
</form>

@section scripts{
    <script>
        $(document).ready(function () {
            var isFormSubbmited = false;

            var viewModel = {
                username: ""
            };

            var users = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('fullName'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                //prefetch: '/api/users/'
                remote: {
                    url: '/api/users?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#user-input').typeahead({
                minLength: 1,
                highlight: true
            },
                {
                    name: 'users',
                    display: 'fullName',
                    source: users,
                    limit: 10,
                })
                .on('typeahead:select',
                function (e, user) {
                    $("#Username").val(user.userName);
                });          

            $("#payment-submit").click(function (e) {

                if (!isFormSubbmited) {
                    e.preventDefault();
                }

                if ($("#Username").val() == undefined || $("#Username").val() === "") {
                    toastr.error("Please select a valid user.");
                    return;
                }

                if ($("#Amount").val() == undefined || $("#Amount").val() == 0) {
                    toastr.error("Amount cannot be zero.");
                    return;
                }

                isFormSubbmited = true;
                $("#newPaymnet").submit();

            });
        });
    </script>
}

